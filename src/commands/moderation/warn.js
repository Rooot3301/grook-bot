import { SlashCommandBuilder, EmbedBuilder } from 'discord.js'; import { withGuard } from '../../utils/commandGuard.js'; import { readJSON, writeJSON } from '../../utils/jsonStore.js'; import { paginate } from '../../utils/pagination.js'; import { Colors } from '../../utils/theme.js'; import { logAction } from '../../utils/audit.js';
const FILE='src/data/warns.json'; const REASONS=['spam','insulte','harcèlement','pub','toxique','nsfw','autre'];
export const data=new SlashCommandBuilder().setName('warn').setDescription('Gérer les avertissements')
  .addSubcommand(s=>s.setName('add').setDescription('Avertir un membre').addUserOption(o=>o.setName('user').setDescription('Membre').setRequired(true)).addStringOption(o=>o.setName('reason').setDescription('Raison').setAutocomplete(true).setRequired(true)))
  .addSubcommand(s=>s.setName('list').setDescription('Lister les avertissements').addUserOption(o=>o.setName('user').setDescription('Membre')));
export async function execute(interaction){ if(interaction.isAutocomplete()){ const f=interaction.options.getFocused(true); if(f?.name==='reason'){ const q=(f.value||'').toLowerCase(); const filtered=REASONS.filter(r=>r.startsWith(q)).slice(0,25); return interaction.respond(filtered.map(r=>({name:r,value:r}))); } return; }
  return withGuard(handler,{perms:['ModerateMembers'],ephemeralByDefault:true,cooldownMs:1500})(interaction); }
async function handler(interaction){ const sub=interaction.options.getSubcommand(true); const guildId=interaction.guildId;
  if(sub==='add'){ const user=interaction.options.getUser('user',true); const reason=interaction.options.getString('reason',true); const db=await readJSON(FILE,{}); db[guildId] ||= {}; db[guildId][user.id] ||= []; const entry={reason,by:interaction.user.id,at:Date.now()}; db[guildId][user.id].push(entry); await writeJSON(FILE,db); await logAction({actorId:interaction.user.id,guildId,targetId:user.id,action:'warn.add',details:entry}); const emb=new EmbedBuilder().setColor(Colors.warn).setDescription(`⚠️ **${user.tag}** averti : *${reason}*`); return interaction.editReply({embeds:[emb]}); }
  if(sub==='list'){ const user=interaction.options.getUser('user'); const db=await readJSON(FILE,{}); const arr=user?(db[guildId]?.[user.id]||[]):[]; const lines=arr.map((e,i)=>`#${i+1} — ${user?.tag} — ${e.reason} (${new Date(e.at).toLocaleString()})`); if(lines.length===0) return interaction.editReply('Aucun avertissement.'); return paginate(interaction,{title:`Warns de ${user.tag}`,lines,perPage:10}); }
}